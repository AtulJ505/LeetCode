class Solution {
public:

    vector<pair<int,int>> dir = {{1,0}, {-1,0}, {0,-1}, {0,1}};

    int minimumEffortPath(vector<vector<int>>& nums) {
        int n = nums.size();
        int m = nums[0].size();

        vector<vector<int>> diff(n,vector<int>(m,0));
        vector<vector<bool>> visited(n,vector<bool> (m,false));

        priority_queue<pair<int,pair<int,int>> , vector<pair<int,pair<int,int>>> , greater<pair<int,pair<int,int>>> > pq;
        pq.push({0,{0,0}});
        visited[0][0] = true;
        int maxEffort = 0;

        while(pq.size()>0){
            auto curr = pq.top();
            int effort = curr.first;
            int i = curr.second.first;
            int j = curr.second.second;
            cout<<i<<" "<<j<<endl;
            pq.pop();

            maxEffort = max(maxEffort,effort);
            if(i==n-1 && j==m-1) return maxEffort;
            visited[i][j] = true;

            for(int d=0;d<4;d++){
                int row = i + dir[d].first;
                int col = j + dir[d].second;

                if(row<0 || col<0 || row>=n || col>=m) continue;
                if(visited[row][col]==true){
                    continue;
                }
                if(!visited[row][col]){
                    int newEffort = abs(nums[i][j]-nums[row][col]);
                    pq.push({newEffort,{row,col}});
                }
            }
        }
        return maxEffort;
    }
};
